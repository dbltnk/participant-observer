---
description: 
globs: 
alwaysApply: true
---
# Participant Observer - Development Rules

**‚ö†Ô∏è These are MANDATORY requirements, not suggestions.**

## üö® Rule #0: Re-State The Rules

**Before starting to work, always briefly restate the 3 rules.**

## üö® Rule #1: NO Silent Failures

**Never write code that silently fails or uses mystery fallback values:**

```javascript
// ‚ùå NEVER DO THIS - Silent failure hell
const x = wall.x || wall.position?.x || 0;
const width = wall.width || wall.displayWidth || 100;

// ‚úÖ DO THIS - Explicit and debuggable
function assert(condition, message) {
    if (!condition) throw new Error('ASSERTION FAILED: ' + message);
}

assert(wall, "Wall object is required");
assert(typeof wall.x === 'number', "wall.x must be a number");
const x = wall.x;
const width = wall.width ?? (() => {
    console.warn("No width provided, using default 100");
    return 100;
})();
```

**Why:** When bugs happen, you need to know immediately what's wrong and where. Silent failures hide problems and make debugging take 10x longer.

## üéØ Rule #2: ALL Balance Values in GameConfig.js

**Every number that affects gameplay MUST be in GameConfig.js:**

- Player movement speed
- Villager behavior timings
- Resource spawn rates
- Need decay rates
- Entity health values
- UI dimensions
- Animation durations

**NO exceptions. NO hardcoded values in game logic.**

```javascript
// ‚ùå NEVER
if (hunger < 50) { /* ... */ }

// ‚úÖ ALWAYS
if (hunger < GameConfig.needs.hungerThreshold) { /* ... */ }
```

## üìã Rule #3: Read the Logs First

**Before starting any work, check the logs directory and console output.**

The game generates debug logs that show:
- Current game state
- Entity behaviors
- Performance metrics
- Error conditions

**Understanding the current state prevents you from fixing problems that don't exist or missing problems that do.**

---

**That's it. Three rules. Follow them religiously.**